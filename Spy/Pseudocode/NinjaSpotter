class NinjaSpotter:

	#Hash map and hash set should be used for keeping object lookup performance strong
	knownObjectsToOpponents <- empty hash map of objects to empty hash sets

	#adds x to the known objects map
	#RETURN: boolean indicating if x was created or not
	def CREATE(x):
		if x is not a key in the knownObjectsToOpponents map:
			insert key x and value empty hash set into knownObjectsToOpponents
			return true
		endif
		
		return false


	#add x and y as opponents
	#assumes x and y are in the map already
	#RETURN: void
	def Oppose(x,y):
		#This is used to bypass the opponents operation if it is clear that x and y cannot be opponents since one did not exist yet
		hadToCreateXOrY <- CREATE(x) OR CREATE(Y)

		if hadToCreateXOrY is false AND Opponents(x,y) yields that x and y are not opponents:
			report a logic error and halt execution
		endif

		x hash set <- hash set in knownObjectsToOpponents from key x
		y hash set <- hash set in knownObjectsToOpponents from key y
		
		x hash set <- x hash set UNION y
		y hash set <- y hash set UNION x

	
	#return whether x and y are on the same side, diff sides, or cannot be established
	#Has a time complexity of O(V+E) due to the Breadth First Search
	#RETURN: boolean type which can also have a null state to cover the 3 plausible states: True -> Opponents, False -> not opponents, null -> cannot tell
	def Opponents(x,y):
		depthOfPathToY <- BreadthFirstSearch(x,y) which yields the depth of a shortest path to y from x including y but not x; returns -1 if there is no path

		if depthOfPathToY is -1:
			return that this property cannot be established

		else if depthOfPathToY is odd:
			return that x and y are opponents
		endif

		#covers if the path depth is even
		return that x and y are not opponents
		
====================================================================================
	#Correctness for odd/even depth of shortest path indicating opponent status
	
	#We know that the map of known objects stores opponents
	#Base case: x and y are directly opponents; the path from x to y is is of depth 1 (direct connection) which is odd, thus x and y are opponents
	
	#P(n) -> P(n+1):
	#Assume there is a shortest path x to y through x to u and u to y such that the even/odd scheme works for u to y and x directly connects to u 	(x-u-...-y)
	#path depth increases by 1 due to the direct connection x-u, toggling the object count between even and odd; since u~y is the shortest path, its depth is deterministic
		
	#Assume u is opponents with y; Due to 1st assumption, u~y has an odd depth
		#Since x is opponents with u, then x should NOT be opponents with y. 
		#Since the even / odd scheme works for u~y, the depth toggles from odd to even. Therefore x and y are NOT opponents.
		#QED P(n+1)

	#Assume u is NOT an opponent with y; Due to 1st assumption, u~y has an even depth
		#Since x is NOT opponents with u, then x should be opponents with y. 
		#Since the even / odd scheme works for u~y, the toggles from even to odd. Therefore x and y are opponents.
		#QED P(n+1)


	#Correctness for BreadthFirstSearch yielding the shortest path from x to y

	#Assume	it does not and there exists a shorter path x-...-y; each edge has a weight of 1
	#A path can be taken from x to y that yields a shorter distance to y
	#Contradiction: Breadth first searches have the property that during exploration, distance from the root strictly increase. (must explore all of depth d before going to d+1)
		If a shorter path to y exists, then either the distance would have to decrease, violating this property or the path would have been discovered earlier
	#Thus, Breadth First Search yields the shortest path
=====================================================================================

	#Since breadthFirstSearch is a well-know algorithm, I just want to explain my variant of it in a high level way
	#This should give a better idea of my intent for the algorithm, but shouldnt explain how breadth first searches work
	#RETURN: integer indicating depth to reach y or an indicator (-1) if y cannot be reached
	def BreadthFirstSearch(x,y):
		depth <- -1 #-1 indicates no y found
		
		perform a breadth first search, keeping track of what depth we are on at each iteration; only examine nodes reachable from x
		when y is found, set depth to the depth level it was found at and stop searching, otherwise keep going
		
		return depth
